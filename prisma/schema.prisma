// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// Prisma Client generator
generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

// PostgreSQL datasource
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// --- Enums ---
enum PlaceType {
  vet
  shelter
}

enum ExternalSource {
  petfinder
}

// --- NextAuth core models ---
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?

  // App-specific fields
  username      String    @unique
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  accounts      Account[]
  sessions      Session[]
  reviews       Review[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// --- Domain models ---
model Place {
  id         String     @id @default(cuid())
  name       String
  type       PlaceType
  phone      String?
  website    String?
  address    String
  zipcode    String
  lat        Float?
  lng        Float?
  priceLevel Int?
  rating     Float      @default(0)
  reviewCount Int       @default(0)
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt

  // Relations
  services   PlaceService[]
  reviews    Review[]

  // Indexes
  @@index([zipcode])
  @@index([lat, lng])
}

// Lookup table for ZIP code centers
model ZipCode {
  zip   String @id
  city  String
  state String
  lat   Float
  lng   Float
}

model PlaceService {
  id      String @id @default(cuid())
  placeId String
  name    String

  place Place @relation(fields: [placeId], references: [id], onDelete: Cascade)

  @@index([placeId])
  @@unique([placeId, name])
}

model Review {
  id        String   @id @default(cuid())
  placeId   String?
  userId    String?
  externalSource ExternalSource?
  externalId String?
  rating    Int
  text      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  place Place? @relation(fields: [placeId], references: [id], onDelete: Cascade)
  user  User?  @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@index([placeId])
  @@index([userId])
  @@index([externalSource, externalId])
}

// --- Community info (InfoCard) ---
// Legacy per-attribute table kept for backward-compatibility
model PlaceFirstVisitVote {
  id        String   @id @default(cuid())
  placeId   String
  userId    String
  value     Boolean  // true = Yes, false = No
  createdAt DateTime @default(now())

  place Place @relation(fields: [placeId], references: [id], onDelete: Cascade)
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([placeId, userId])
  @@index([placeId])
  @@index([userId])
}

// New generic attribute voting
enum PlaceAttribute {
  FIRST_VISIT_FREE
}

model PlaceAttributeVote {
  id        String         @id @default(cuid())
  placeId   String
  userId    String
  attribute PlaceAttribute
  // For FIRST_VISIT_FREE, true=yes false=no
  boolValue Boolean
  createdAt DateTime       @default(now())

  place Place @relation(fields: [placeId], references: [id], onDelete: Cascade)
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([placeId, userId, attribute])
  @@index([placeId])
  @@index([userId])
}

model Doctor {
  id        String   @id @default(cuid())
  placeId   String
  name      String
  createdAt DateTime @default(now())

  place Place @relation(fields: [placeId], references: [id], onDelete: Cascade)
  recs  DoctorRecommendation[]

  @@unique([placeId, name])
  @@index([placeId])
}

model DoctorRecommendation {
  id        String   @id @default(cuid())
  doctorId  String?
  // legacy columns (nullable to preserve data)
  placeId   String?
  name      String?
  userId    String
  reason    String?
  createdAt DateTime @default(now())

  doctor Doctor? @relation(fields: [doctorId], references: [id], onDelete: Cascade)
  // legacy relation
  place  Place?  @relation(fields: [placeId], references: [id], onDelete: Cascade)
  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([doctorId, userId])
  @@index([doctorId])
  @@index([placeId])
  @@index([userId])
}

// --- External-keyed community info for shelters (Petfinder) ---
model ShelterAttributeVote {
  id             String   @id @default(cuid())
  externalSource String
  externalId     String
  userId         String
  key            String
  value          String
  createdAt      DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([externalSource, externalId, userId, key])
  @@index([externalSource, externalId, key])
}

model ShelterDoctor {
  id             String   @id @default(cuid())
  externalSource String
  externalId     String
  name           String
  title          String?
  avatarUrl      String?
  recCount       Int      @default(0)
  createdAt      DateTime @default(now())

  recs ShelterDoctorRecommendation[]

  @@unique([externalSource, externalId, name])
  @@index([externalSource, externalId])
}

model ShelterDoctorRecommendation {
  id        String   @id @default(cuid())
  doctorId  String
  userId    String
  reason    String?
  createdAt DateTime @default(now())

  doctor ShelterDoctor @relation(fields: [doctorId], references: [id], onDelete: Cascade)
  user   User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([doctorId, userId])
}

model ShelterAggregate {
  id                   String   @id @default(cuid())
  externalSource       String
  externalId           String
  firstVisitFreeYes    Int      @default(0)
  firstVisitFreeNo     Int      @default(0)
  firstVisitFreeScore  Float    @default(0)
  firstVisitConfidence Float    @default(0)
  topDoctorsJson       Json?
  updatedAt            DateTime @updatedAt

  @@unique([externalSource, externalId])
}
